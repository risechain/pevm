//! Ethereum

use std::{
    collections::{BTreeMap, HashMap},
    fmt::Debug,
};

use alloy_chains::NamedChain;
use alloy_consensus::{ReceiptEnvelope, TxType};
use alloy_primitives::{TxKind, B256, U256};
use alloy_provider::network::eip2718::Encodable2718;
use alloy_rpc_types::{BlockTransactions, Header};
use revm::{
    primitives::{BlockEnv, SpecId, TxEnv},
    Handler,
};

use super::{PevmChain, RewardPolicy};
use crate::{
    mv_memory::MvMemory, BuildIdentityHasher, MemoryLocation, PevmTxExecutionResult, TxIdx,
};

/// Implementation of [PevmChain] for Ethereum
#[derive(Debug, Clone, PartialEq)]
pub struct PevmEthereum {
    id: u64,
}

impl PevmEthereum {
    /// Ethereum Mainnet
    pub fn mainnet() -> Self {
        Self {
            id: NamedChain::Mainnet.into(),
        }
    }

    // TODO: support Ethereum Sepolia and other testnets
}

/// Error type for [PevmEthereum::get_block_spec].
#[derive(Debug, Clone, PartialEq)]
pub enum EthereumBlockSpecError {
    /// When [header.total_difficulty] is none.
    MissingTotalDifficulty,
}

/// Represents errors that can occur when parsing transactions
#[derive(Debug, Clone, PartialEq)]
pub enum EthereumTransactionParsingError {
    /// [tx.gas] is overflowed.
    OverflowedGasLimit,
    /// [tx.type] is invalid.
    InvalidType(u8),
    /// [tx.gas_price] is none.
    MissingGasPrice,
    /// [tx.max_fee_per_gas] is none.
    MissingMaxFeePerGas,
}

fn get_ethereum_gas_price(
    tx: &alloy_rpc_types::Transaction,
) -> Result<U256, EthereumTransactionParsingError> {
    let tx_type_raw: u8 = tx.transaction_type.unwrap_or_default();
    let Ok(tx_type) = TxType::try_from(tx_type_raw) else {
        return Err(EthereumTransactionParsingError::InvalidType(tx_type_raw));
    };

    match tx_type {
        TxType::Legacy | TxType::Eip2930 => tx
            .gas_price
            .map(U256::from)
            .ok_or(EthereumTransactionParsingError::MissingGasPrice),
        TxType::Eip1559 | TxType::Eip4844 | TxType::Eip7702 => tx
            .max_fee_per_gas
            .map(U256::from)
            .ok_or(EthereumTransactionParsingError::MissingMaxFeePerGas),
    }
}

impl PevmChain for PevmEthereum {
    type Transaction = alloy_rpc_types::Transaction;
    type BlockSpecError = EthereumBlockSpecError;
    type TransactionParsingError = EthereumTransactionParsingError;

    fn id(&self) -> u64 {
        self.id
    }

    fn build_tx_from_alloy_tx(&self, tx: alloy_rpc_types::Transaction) -> Self::Transaction {
        tx
    }

    /// Get the REVM spec id of an Alloy block.
    // Currently hardcoding Ethereum hardforks from these reference:
    // https://github.com/paradigmxyz/reth/blob/4fa627736681289ba899b38f1c7a97d9fcf33dc6/crates/primitives/src/revm/config.rs#L33-L78
    // https://github.com/paradigmxyz/reth/blob/4fa627736681289ba899b38f1c7a97d9fcf33dc6/crates/primitives/src/chain/spec.rs#L44-L68
    // TODO: Better error handling & properly test this.
    // TODO: Only Ethereum Mainnet is supported at the moment.
    fn get_block_spec(&self, header: &Header) -> Result<SpecId, Self::BlockSpecError> {
        Ok(if header.timestamp >= 1710338135 {
            SpecId::CANCUN
        } else if header.timestamp >= 1681338455 {
            SpecId::SHANGHAI
        } else if (header
            .total_difficulty
            .ok_or(EthereumBlockSpecError::MissingTotalDifficulty)?)
        .saturating_sub(header.difficulty)
            >= U256::from(58_750_000_000_000_000_000_000_u128)
        {
            SpecId::MERGE
        } else if header.number >= 12965000 {
            SpecId::LONDON
        } else if header.number >= 12244000 {
            SpecId::BERLIN
        } else if header.number >= 9069000 {
            SpecId::ISTANBUL
        } else if header.number >= 7280000 {
            SpecId::PETERSBURG
        } else if header.number >= 4370000 {
            SpecId::BYZANTIUM
        } else if header.number >= 2675000 {
            SpecId::SPURIOUS_DRAGON
        } else if header.number >= 2463000 {
            SpecId::TANGERINE
        } else if header.number >= 1150000 {
            SpecId::HOMESTEAD
        } else {
            SpecId::FRONTIER
        })
    }

    /// Get the REVM tx envs of an Alloy block.
    // https://github.com/paradigmxyz/reth/blob/280aaaedc4699c14a5b6e88f25d929fe22642fa3/crates/primitives/src/revm/env.rs#L234-L339
    // https://github.com/paradigmxyz/reth/blob/280aaaedc4699c14a5b6e88f25d929fe22642fa3/crates/primitives/src/alloy_compat.rs#L112-L233
    // TODO: Properly test this.
    fn get_tx_env(&self, tx: Self::Transaction) -> Result<TxEnv, EthereumTransactionParsingError> {
        Ok(TxEnv {
            caller: tx.from,
            gas_limit: tx
                .gas
                .try_into()
                .map_err(|_| EthereumTransactionParsingError::OverflowedGasLimit)?,
            gas_price: get_ethereum_gas_price(&tx)?,
            gas_priority_fee: tx.max_priority_fee_per_gas.map(U256::from),
            transact_to: tx.to.into(),
            value: tx.value,
            data: tx.input,
            nonce: Some(tx.nonce),
            chain_id: tx.chain_id,
            access_list: tx.access_list.unwrap_or_default().into(),
            blob_hashes: tx.blob_versioned_hashes.unwrap_or_default(),
            max_fee_per_blob_gas: tx.max_fee_per_blob_gas.map(U256::from),
            authorization_list: None, // TODO: Support in the upcoming hardfork
        })
    }

    fn build_mv_memory(
        &self,
        hasher: &ahash::RandomState,
        block_env: &BlockEnv,
        txs: &[TxEnv],
    ) -> MvMemory {
        let block_size = txs.len();
        let beneficiary_location_hash = hasher.hash_one(MemoryLocation::Basic(block_env.coinbase));

        // TODO: Estimate more locations based on sender, to, etc.
        let mut estimated_locations = HashMap::with_hasher(BuildIdentityHasher::default());
        estimated_locations.insert(
            beneficiary_location_hash,
            (0..block_size).collect::<Vec<TxIdx>>(),
        );

        MvMemory::new(
            block_size,
            estimated_locations,
            [MemoryLocation::Basic(block_env.coinbase)],
        )
    }

    fn get_handler<'a, EXT, DB: revm::Database>(
        &self,
        spec_id: SpecId,
        with_reward_beneficiary: bool,
    ) -> Handler<'a, revm::Context<EXT, DB>, EXT, DB> {
        Handler::mainnet_with_spec(spec_id, with_reward_beneficiary)
    }

    fn get_reward_policy(&self, _hasher: &ahash::RandomState) -> RewardPolicy {
        RewardPolicy::Ethereum
    }

    // Refer to section 4.3.2. Holistic Validity in the Ethereum Yellow Paper.
    // https://github.com/ethereum/go-ethereum/blob/master/cmd/era/main.go#L289
    fn calculate_receipt_root(
        &self,
        _spec_id: SpecId,
        txs: &BlockTransactions<Self::Transaction>,
        tx_results: &[PevmTxExecutionResult],
    ) -> B256 {
        // 1. Create an iterator of ReceiptEnvelope
        let tx_type_iter = txs
            .txns()
            .map(|tx| TxType::try_from(tx.transaction_type.unwrap_or_default()).unwrap());

        let receipt_iter = tx_results.iter().map(|tx| tx.receipt.clone().with_bloom());

        let receipt_envelope_iter =
            Iterator::zip(tx_type_iter, receipt_iter).map(|(tx_type, receipt)| match tx_type {
                TxType::Legacy => ReceiptEnvelope::Legacy(receipt),
                TxType::Eip2930 => ReceiptEnvelope::Eip2930(receipt),
                TxType::Eip1559 => ReceiptEnvelope::Eip1559(receipt),
                TxType::Eip4844 => ReceiptEnvelope::Eip4844(receipt),
                TxType::Eip7702 => ReceiptEnvelope::Eip7702(receipt),
            });

        // 2. Create a trie then calculate the root hash
        // We use BTreeMap because the keys must be sorted in ascending order.
        let trie_entries: BTreeMap<_, _> = receipt_envelope_iter
            .enumerate()
            .map(|(index, receipt)| {
                let key_buffer = alloy_rlp::encode_fixed_size(&index);
                let mut value_buffer = Vec::new();
                receipt.encode_2718(&mut value_buffer);
                (key_buffer, value_buffer)
            })
            .collect();

        let mut hash_builder = alloy_trie::HashBuilder::default();
        for (k, v) in trie_entries {
            hash_builder.add_leaf(alloy_trie::Nibbles::unpack(&k), &v);
        }
        hash_builder.root()
    }

    fn is_erc20_transfer(&self, tx: &TxEnv) -> bool {
        let TxKind::Call(contract_address) = tx.transact_to else {
            return false;
        };

        tx.data.len() == 4 + 32 + 32
            && tx.data.starts_with(&[0xa9, 0x05, 0x9c, 0xbb])
            && ERC20_KNOWN_ADDRESSES.contains(contract_address.as_ref())
    }
}

static ERC20_KNOWN_ADDRESSES: phf::Set<[u8; 20]> = phf::phf_set! {
    [0x03,0x8a,0x68,0xff,0x68,0xc3,0x93,0x37,0x3e,0xc8,0x94,0x01,0x58,0x16,0xe3,0x3a,0xd4,0x1b,0xd5,0x64],
    [0x03,0x91,0xd2,0x02,0x1f,0x89,0xdc,0x33,0x9f,0x60,0xff,0xf8,0x45,0x46,0xea,0x23,0xe3,0x37,0x75,0x0f],
    [0x04,0x3c,0x30,0x8b,0xb8,0xa5,0xae,0x96,0xd0,0x09,0x34,0x44,0xbe,0x7f,0x56,0x45,0x9f,0x13,0x40,0xb1],
    [0x05,0x99,0x56,0x48,0x37,0x53,0x94,0x75,0x36,0x20,0x4e,0x89,0xbf,0xad,0x90,0x9e,0x1a,0x43,0x4c,0xc6],
    [0x06,0x45,0x0d,0xee,0x7f,0xd2,0xfb,0x8e,0x39,0x06,0x14,0x34,0xba,0xbc,0xfc,0x05,0x59,0x9a,0x6f,0xb8],
    [0x07,0xc5,0x2c,0x25,0x37,0xd8,0x4e,0x53,0x2a,0x9f,0x15,0xd3,0x2e,0x15,0x2c,0x8b,0x94,0xd2,0xb2,0x32],
    [0x07,0xd0,0xae,0x1a,0xa8,0x1a,0x74,0x7f,0xe9,0x8f,0xec,0x0c,0xb7,0xe5,0xe5,0xf3,0xcc,0xaf,0xb5,0x89],
    [0x07,0xd9,0xe4,0x9e,0xa4,0x02,0x19,0x4b,0xf4,0x8a,0x82,0x76,0xda,0xfb,0x16,0xe4,0xed,0x63,0x33,0x17],
    [0x09,0x01,0x85,0xf2,0x13,0x53,0x08,0xba,0xd1,0x75,0x27,0x00,0x43,0x64,0xeb,0xcc,0x2d,0x37,0xe5,0xf6],
    [0x09,0xa3,0xec,0xaf,0xa8,0x17,0x26,0x8f,0x77,0xbe,0x12,0x83,0x17,0x6b,0x94,0x6c,0x4f,0xf2,0xe6,0x08],
    [0x0b,0x38,0x21,0x0e,0xa1,0x14,0x11,0x55,0x7c,0x13,0x45,0x7d,0x4d,0xa7,0xdc,0x6e,0xa7,0x31,0xb8,0x8a],
    [0x0b,0xc5,0x29,0xc0,0x0c,0x64,0x01,0xae,0xf6,0xd2,0x20,0xbe,0x8c,0x6e,0xa1,0x66,0x7f,0x6a,0xd9,0x3e],
    [0x0d,0x15,0x2b,0x9e,0xe8,0x7e,0xba,0xe1,0x79,0xf6,0x4c,0x06,0x7a,0x96,0x6d,0xd7,0x16,0xc5,0x07,0x42],
    [0x0f,0x51,0xbb,0x10,0x11,0x97,0x27,0xa7,0xe5,0xea,0x35,0x38,0x07,0x4f,0xb3,0x41,0xf5,0x6b,0x09,0xad],
    [0x10,0x63,0x32,0x16,0xe7,0xe8,0x28,0x1e,0x33,0xc8,0x6f,0x02,0xbf,0x8e,0x56,0x5a,0x63,0x5d,0x97,0x70],
    [0x11,0x11,0x11,0x11,0x11,0x17,0xdc,0x0a,0xa7,0x8b,0x77,0x0f,0xa6,0xa7,0x38,0x03,0x41,0x20,0xc3,0x02],
    [0x14,0xd3,0x12,0xac,0x2b,0xfc,0x95,0xd9,0xbb,0xef,0xa8,0x7d,0xeb,0x1d,0x3c,0xfc,0xf6,0x99,0x80,0xde],
    [0x15,0xd4,0xc0,0x48,0xf8,0x3b,0xd7,0xe3,0x7d,0x49,0xea,0x4c,0x83,0xa0,0x72,0x67,0xec,0x42,0x03,0xda],
    [0x16,0x3f,0x8c,0x24,0x67,0x92,0x4b,0xe0,0xae,0x7b,0x53,0x47,0x22,0x8c,0xab,0xf2,0x60,0x31,0x87,0x53],
    [0x16,0x48,0x4d,0x73,0xac,0x08,0xd2,0x35,0x5f,0x46,0x6d,0x44,0x8d,0x2b,0x79,0xd2,0x03,0x9f,0x6e,0xbb],
    [0x17,0xe6,0x7d,0x1c,0xb4,0xe3,0x49,0xb9,0xca,0x4b,0xc3,0xe1,0x7c,0x7d,0xf2,0xa3,0x97,0xa7,0xbb,0x64],
    [0x18,0x08,0x4b,0xe3,0x3d,0x80,0xc3,0xfd,0xf6,0xe7,0xe7,0xde,0xab,0x4a,0x4e,0x5e,0x26,0x65,0x73,0x31],
    [0x1c,0xe2,0x70,0x55,0x7c,0x1f,0x68,0xcf,0xb5,0x77,0xb8,0x56,0x76,0x63,0x10,0xbf,0x8b,0x47,0xfd,0x9c],
    [0x24,0x9e,0x38,0xea,0x41,0x02,0xd0,0xcf,0x82,0x64,0xd3,0x70,0x1f,0x1a,0x0e,0x39,0xc4,0xf2,0xdc,0x3b],
    [0x25,0xf8,0x08,0x7e,0xad,0x17,0x3b,0x73,0xd6,0xe8,0xb8,0x43,0x29,0x98,0x9a,0x8e,0xea,0x16,0xcf,0x73],
    [0x26,0xc8,0xaf,0xbb,0xfe,0x1e,0xba,0xca,0x03,0xc2,0xbb,0x08,0x2e,0x69,0xd0,0x47,0x6b,0xff,0xe0,0x99],
    [0x2b,0x59,0x1e,0x99,0xaf,0xe9,0xf3,0x2e,0xaa,0x62,0x14,0xf7,0xb7,0x62,0x97,0x68,0xc4,0x0e,0xeb,0x39],
    [0x2e,0x65,0xe1,0x2b,0x5f,0x0f,0xd1,0xd5,0x87,0x38,0xc6,0xf3,0x8d,0xa7,0xd5,0x7f,0x5f,0x18,0x3d,0x1c],
    [0x2f,0x13,0x64,0xd1,0xaf,0x83,0xaf,0xa7,0x48,0xa4,0x52,0x57,0x9b,0x09,0xd6,0x9e,0xe8,0x3e,0x8c,0x86],
    [0x31,0x06,0xa0,0xa0,0x76,0xbe,0xda,0xe8,0x47,0x65,0x2f,0x42,0xef,0x07,0xfd,0x58,0x58,0x9e,0x00,0x1f],
    [0x31,0xc2,0x41,0x5c,0x94,0x69,0x28,0xe9,0xfd,0x1a,0xf8,0x3c,0xdf,0xa3,0x8d,0x3e,0xdb,0xd4,0x32,0x6f],
    [0x36,0xe6,0x6f,0xbb,0xce,0x51,0xe4,0xcd,0x5b,0xd3,0xc6,0x2b,0x63,0x7e,0xb4,0x11,0xb1,0x89,0x49,0xd4],
    [0x3b,0x48,0x4b,0x82,0x56,0x7a,0x09,0xe2,0x58,0x8a,0x13,0xd5,0x4d,0x03,0x21,0x53,0xf0,0xc0,0xae,0xe0],
    [0x3f,0x17,0xdd,0x47,0x6f,0xaf,0x0a,0x48,0x55,0x57,0x2f,0x0b,0x6e,0xd5,0x11,0x5d,0x9b,0xba,0x22,0xad],
    [0x41,0x95,0x8d,0x44,0xa7,0x80,0x69,0x6a,0x2f,0x18,0xb7,0xac,0x35,0x85,0xea,0xe9,0xbb,0xbf,0x07,0x99],
    [0x45,0x75,0xf4,0x13,0x08,0xec,0x14,0x83,0xf3,0xd3,0x99,0xaa,0x9a,0x28,0x26,0xd7,0x4d,0xa1,0x3d,0xeb],
    [0x46,0x7b,0xcc,0xd9,0xd2,0x9f,0x22,0x3b,0xce,0x80,0x43,0xb8,0x4e,0x8c,0x8b,0x28,0x28,0x27,0x79,0x0f],
    [0x46,0x98,0x61,0xbd,0xfd,0x02,0xe7,0xeb,0xce,0x7c,0xde,0xb2,0x81,0xe8,0xee,0xc5,0x30,0x69,0xcf,0x5f],
    [0x47,0x30,0x37,0xde,0x59,0xcf,0x94,0x84,0x63,0x2f,0x4a,0x27,0xb5,0x09,0xcf,0xe8,0xd4,0xa3,0x14,0x04],
    [0x48,0x5d,0x17,0xa6,0xf1,0xb8,0x78,0x03,0x92,0xd5,0x3d,0x64,0x75,0x18,0x24,0x25,0x30,0x11,0xa2,0x60],
    [0x49,0x16,0x04,0xc0,0xfd,0xf0,0x83,0x47,0xdd,0x1f,0xa4,0xee,0x06,0x2a,0x82,0x2a,0x5d,0xd0,0x6b,0x5d],
    [0x49,0xe8,0x33,0x33,0x7e,0xce,0x7a,0xfe,0x37,0x5e,0x44,0xf4,0xe3,0xe8,0x48,0x10,0x29,0x21,0x8e,0x5c],
    [0x4a,0x22,0x0e,0x60,0x96,0xb2,0x5e,0xad,0xb8,0x83,0x58,0xcb,0x44,0x06,0x8a,0x32,0x48,0x25,0x46,0x75],
    [0x4d,0x22,0x44,0x52,0x80,0x1a,0xce,0xd8,0xb2,0xf0,0xae,0xbe,0x15,0x53,0x79,0xbb,0x5d,0x59,0x43,0x81],
    [0x4e,0xd2,0x5d,0x85,0x77,0xfe,0xb8,0x39,0x46,0xb1,0x54,0x89,0x98,0xfb,0x7b,0x15,0x7e,0xad,0x8b,0xb9],
    [0x4f,0xe8,0x32,0x13,0xd5,0x63,0x08,0x33,0x0e,0xc3,0x02,0xa8,0xbd,0x64,0x1f,0x1d,0x01,0x13,0xa4,0xcc],
    [0x50,0x5b,0x5e,0xda,0x5e,0x25,0xa6,0x7e,0x1c,0x24,0xa2,0xbf,0x1a,0x52,0x7e,0xd9,0xeb,0x88,0xbf,0x04],
    [0x50,0xd1,0xc9,0x77,0x19,0x02,0x47,0x60,0x76,0xec,0xfc,0x8b,0x2a,0x83,0xad,0x6b,0x93,0x55,0xa4,0xc9],
    [0x51,0x09,0x75,0xed,0xa4,0x8a,0x97,0xe0,0xca,0x22,0x8d,0xd0,0x4d,0x12,0x17,0x29,0x24,0x87,0xbe,0xa6],
    [0x51,0x52,0x1d,0x62,0x84,0x3c,0x4e,0xdd,0x90,0x17,0x86,0x58,0xab,0x6e,0x3e,0xb9,0xa4,0x29,0x0f,0xca],
    [0x51,0x6e,0x54,0x36,0xba,0xfd,0xc1,0x10,0x83,0x65,0x4d,0xe7,0xbb,0x9b,0x95,0x38,0x2d,0x08,0xd5,0xde],
    [0x51,0xe0,0x0a,0x95,0x74,0x8d,0xbd,0x2a,0x3f,0x47,0xbc,0x5c,0x3b,0x3e,0x7b,0x3f,0x0f,0xea,0x66,0x6c],
    [0x52,0x18,0xe4,0x72,0xcf,0xcf,0xe0,0xb6,0x4a,0x06,0x4f,0x05,0x5b,0x43,0xb4,0xcd,0xc9,0xef,0xd3,0xa6],
    [0x54,0x90,0x20,0xa9,0xcb,0x84,0x52,0x20,0xd6,0x6d,0x3e,0x9c,0x6d,0x9f,0x9e,0xf6,0x1c,0x98,0x11,0x02],
    [0x55,0x65,0x2c,0xe8,0x4d,0x68,0x61,0x77,0xc8,0x94,0x6e,0x8c,0x78,0x07,0x8c,0x0d,0x6c,0xfa,0x4b,0x30],
    [0x58,0x2d,0x87,0x2a,0x1b,0x09,0x4f,0xc4,0x8f,0x5d,0xe3,0x1d,0x3b,0x73,0xf2,0xd9,0xbe,0x47,0xde,0xf1],
    [0x59,0x58,0x32,0xf8,0xfc,0x6b,0xf5,0x9c,0x85,0xc5,0x27,0xfe,0xc3,0x74,0x0a,0x1b,0x7a,0x36,0x12,0x69],
    [0x5c,0xa3,0x81,0xbb,0xfb,0x58,0xf0,0x09,0x2d,0xf1,0x49,0xbd,0x3d,0x24,0x3b,0x08,0xb9,0xa8,0x38,0x6e],
    [0x64,0x68,0xe7,0x9a,0x80,0xc0,0xea,0xb0,0xf9,0xa2,0xb5,0x74,0xc8,0xd5,0xbc,0x37,0x4a,0xf5,0x94,0x14],
    [0x68,0x29,0x14,0x26,0xe4,0x98,0xaf,0x5e,0xb7,0xbf,0xf9,0x6b,0xf6,0x13,0x73,0x6f,0xed,0xe7,0x70,0x2b],
    [0x69,0xaf,0x81,0xe7,0x3a,0x73,0xb4,0x0a,0xdf,0x4f,0x3d,0x42,0x23,0xcd,0x9b,0x1e,0xce,0x62,0x30,0x74],
    [0x6b,0x1a,0x8f,0x21,0x0e,0xc6,0xb7,0xb6,0x64,0x3c,0xea,0x35,0x83,0xfb,0x0c,0x07,0x9f,0x36,0x78,0x98],
    [0x6c,0xd3,0xcb,0xfa,0x29,0xeb,0xb6,0x3e,0x84,0x13,0x2a,0xd7,0xb1,0xa1,0x04,0x07,0xab,0xa3,0x0a,0xcd],
    [0x6d,0x61,0x46,0x86,0x55,0x0b,0x9e,0x1c,0x1d,0xf4,0xb2,0xcd,0x8f,0x91,0xc9,0xd4,0xdf,0x66,0xc8,0x10],
    [0x6f,0x25,0x96,0x37,0xdc,0xd7,0x4c,0x76,0x77,0x81,0xe3,0x7b,0xc6,0x13,0x3c,0xd6,0xa6,0x8a,0xa1,0x61],
    [0x70,0xbc,0x0d,0xc6,0x41,0x4e,0xb8,0x97,0x4b,0xc7,0x06,0x85,0xf7,0x98,0x83,0x8a,0x87,0xd8,0xcc,0xe4],
    [0x72,0x8f,0x30,0xfa,0x2f,0x10,0x07,0x42,0xc7,0x94,0x9d,0x19,0x61,0x80,0x4f,0xa8,0xe0,0xb1,0x38,0x7d],
    [0x74,0x80,0xcf,0x39,0x52,0x9a,0xb0,0x4d,0x49,0x68,0x49,0x5f,0x1d,0x6e,0xb0,0xd2,0x32,0xbc,0x47,0x90],
    [0x76,0x1d,0x38,0xe5,0xdd,0xf6,0xcc,0xf6,0xcf,0x7c,0x55,0x75,0x9d,0x52,0x10,0x75,0x0b,0x5d,0x60,0xf3],
    [0x7a,0x58,0xc0,0xbe,0x72,0xbe,0x21,0x8b,0x41,0xc6,0x08,0xb7,0xfe,0x7c,0x5b,0xb6,0x30,0x73,0x6c,0x71],
    [0x7d,0xe9,0x1b,0x20,0x4c,0x1c,0x73,0x7b,0xce,0xe6,0xf0,0x00,0xaa,0xa6,0x56,0x9c,0xf7,0x06,0x1c,0xb7],
    [0x7e,0x29,0x18,0x90,0xb0,0x1e,0x51,0x81,0xf7,0xec,0xc9,0x8d,0x79,0xff,0xbe,0x12,0xad,0x23,0xdf,0x9e],
    [0x80,0x80,0xb6,0x6e,0x75,0x05,0xdb,0x9b,0xd1,0xd7,0xbb,0x44,0xa7,0xb9,0x51,0x87,0x54,0xc8,0xd2,0x6b],
    [0x82,0x61,0x80,0x54,0x14,0x12,0xd5,0x74,0xcf,0x13,0x36,0xd2,0x2c,0x0c,0x0a,0x28,0x78,0x22,0x67,0x8a],
    [0x82,0x90,0x33,0x3c,0xef,0x9e,0x6d,0x52,0x8d,0xd5,0x61,0x8f,0xb9,0x7a,0x76,0xf2,0x68,0xf3,0xed,0xd4],
    [0x85,0x3d,0x95,0x5a,0xce,0xf8,0x22,0xdb,0x05,0x8e,0xb8,0x50,0x59,0x11,0xed,0x77,0xf1,0x75,0xb9,0x9e],
    [0x85,0xee,0xe3,0x0c,0x52,0xb0,0xb3,0x79,0xb0,0x46,0xfb,0x0f,0x85,0xf4,0xf3,0xdc,0x30,0x09,0xaf,0xec],
    [0x88,0x88,0x88,0x88,0x88,0x89,0xc0,0x0c,0x67,0x68,0x90,0x29,0xd7,0x85,0x6a,0xac,0x10,0x65,0xec,0x11],
    [0x8f,0x69,0x3c,0xa8,0xd2,0x1b,0x15,0x71,0x07,0x18,0x4d,0x29,0xd3,0x98,0xa8,0xd0,0x82,0xb3,0x8b,0x76],
    [0x92,0x87,0xae,0xfe,0x51,0x04,0x7e,0xf4,0x3f,0x68,0x61,0x2f,0x80,0xba,0xc1,0x77,0x45,0xb2,0x3a,0xec],
    [0x94,0x03,0xca,0x0f,0x80,0x2c,0x3c,0xc1,0xa4,0x53,0x72,0xe4,0x4c,0xdd,0x7e,0xd0,0xe5,0xcd,0x1a,0x04],
    [0x95,0xad,0x61,0xb0,0xa1,0x50,0xd7,0x92,0x19,0xdc,0xf6,0x4e,0x1e,0x6c,0xc0,0x1f,0x0b,0x64,0xc4,0xce],
    [0x96,0x6d,0xae,0xd1,0x34,0x8f,0xbd,0x89,0x4b,0xb6,0xc4,0x04,0xd9,0xcd,0xdf,0x78,0xa9,0x93,0x29,0x13],
    [0x9b,0x4e,0x2b,0x4b,0x13,0xd1,0x25,0x23,0x8a,0xa0,0x48,0x0d,0xd4,0x2b,0x4f,0x6f,0xc7,0x1b,0x37,0xcc],
    [0x9e,0x32,0xb1,0x3c,0xe7,0xf2,0xe8,0x0a,0x01,0x93,0x2b,0x42,0x55,0x36,0x52,0xe0,0x53,0xd6,0xed,0x8e],
    [0xa0,0x00,0x8f,0x51,0x0f,0xe9,0xee,0x69,0x6e,0x7e,0x32,0x0c,0x9e,0x5c,0xbf,0x61,0xe2,0x77,0x91,0xee],
    [0xa0,0xef,0x78,0x6b,0xf4,0x76,0xfe,0x08,0x10,0x40,0x8c,0xab,0xa0,0x5e,0x53,0x6a,0xc8,0x00,0xff,0x86],
    [0xa1,0x30,0xe3,0xa3,0x3a,0x4d,0x84,0xb0,0x4c,0x39,0x18,0xc4,0xe5,0x76,0x22,0x23,0xae,0x25,0x2f,0x80],
    [0xa1,0xed,0xc7,0x81,0x99,0xa6,0xe5,0x6f,0xd5,0x2f,0x69,0xcf,0x7c,0x10,0xf6,0x7d,0xed,0x15,0x18,0x5d],
    [0xa4,0x44,0xec,0x96,0xee,0x01,0xbb,0x21,0x9a,0x44,0xb2,0x85,0xde,0x47,0xbf,0x33,0xc3,0x44,0x7a,0xd5],
    [0xa4,0x5f,0xda,0xc9,0xdc,0x56,0x73,0xdb,0x72,0xe6,0x4a,0xe2,0xc4,0xb8,0x6e,0x67,0x0d,0xb0,0x18,0x7d],
    [0xa4,0x7c,0x8b,0xf3,0x7f,0x92,0xab,0xed,0x4a,0x12,0x6b,0xda,0x80,0x7a,0x7b,0x74,0x98,0x66,0x1a,0xcd],
    [0xa7,0xd1,0x0f,0xf9,0x62,0xed,0xa4,0x1f,0x3b,0x03,0x7e,0x3a,0xf1,0xd8,0xb4,0x03,0x7e,0xba,0x4b,0x86],
    [0xa8,0x6a,0x0d,0xa9,0xd0,0x5d,0x07,0x71,0x95,0x5d,0xf0,0x5b,0x44,0xca,0x12,0x06,0x61,0xaf,0x16,0xde],
    [0xa9,0xb1,0xeb,0x59,0x08,0xcf,0xc3,0xcd,0xf9,0x1f,0x9b,0x8b,0x3a,0x74,0x10,0x85,0x98,0x00,0x90,0x96],
    [0xac,0x51,0x06,0x6d,0x7b,0xec,0x65,0xdc,0x45,0x89,0x36,0x8d,0xa3,0x68,0xb2,0x12,0x74,0x5d,0x63,0xe8],
    [0xaf,0x51,0x91,0xb0,0xde,0x27,0x8c,0x72,0x86,0xd6,0xc7,0xcc,0x6a,0xb6,0xbb,0x8a,0x73,0xba,0x2c,0xd6],
    [0xb1,0x31,0xf4,0xa5,0x59,0x07,0xb1,0x0d,0x1f,0x0a,0x50,0xd8,0xab,0x8f,0xa0,0x9e,0xc3,0x42,0xcd,0x74],
    [0xb7,0xcb,0x1c,0x96,0xdb,0x6b,0x22,0xb0,0xd3,0xd9,0x53,0x6e,0x01,0x08,0xd0,0x62,0xbd,0x48,0x8f,0x74],
    [0xb9,0x6f,0x54,0x7d,0xa0,0x42,0x73,0x7c,0x95,0xd7,0xf9,0x39,0x7c,0xd8,0x60,0x68,0xd0,0xa8,0x17,0xa8],
    [0xba,0x0d,0xda,0x87,0x62,0xc2,0x4d,0xa9,0x48,0x7f,0x5f,0xa0,0x26,0xa9,0xb6,0x4b,0x69,0x5a,0x07,0xea],
    [0xbb,0xbb,0xca,0x6a,0x90,0x1c,0x92,0x6f,0x24,0x0b,0x89,0xea,0xcb,0x64,0x1d,0x8a,0xec,0x7a,0xea,0xfd],
    [0xc3,0x97,0x2a,0xc2,0x83,0xb3,0xa7,0xa5,0x61,0x25,0x67,0x46,0x31,0xa5,0xc2,0x54,0xf7,0xf3,0x73,0xcf],
    [0xc6,0xe1,0x45,0x42,0x1f,0xd4,0x94,0xb2,0x6d,0xcf,0x2b,0xfe,0xb1,0xb0,0x2b,0x7c,0x57,0x21,0x97,0x8f],
    [0xc7,0x1b,0x5f,0x63,0x13,0x54,0xbe,0x68,0x53,0xef,0xe9,0xc3,0xab,0x6b,0x95,0x90,0xf8,0x30,0x2e,0x81],
    [0xc8,0xcc,0xc8,0x2a,0xa6,0x61,0x93,0xf8,0xab,0x95,0x78,0x59,0x19,0x8f,0x08,0x6e,0x0e,0x29,0xd0,0x2d],
    [0xcb,0x84,0xd7,0x2e,0x61,0xe3,0x83,0x76,0x7c,0x4d,0xfe,0xb2,0xd8,0xff,0x7f,0x4f,0xb8,0x9a,0xbc,0x6e],
    [0xcc,0xc8,0xcb,0x52,0x29,0xb0,0xac,0x80,0x69,0xc5,0x1f,0xd5,0x83,0x67,0xfd,0x1e,0x62,0x2a,0xfd,0x97],
    [0xd0,0x35,0x2a,0x01,0x9e,0x9a,0xb9,0xd7,0x57,0x77,0x6f,0x53,0x23,0x77,0xaa,0xeb,0xd3,0x6f,0xd5,0x41],
    [0xd1,0x3c,0xfd,0x31,0x33,0x23,0x9a,0x3c,0x73,0xa9,0xe5,0x35,0xa5,0xc4,0xda,0xde,0xe3,0x6b,0x39,0x5c],
    [0xd3,0xeb,0xda,0xea,0x9a,0xea,0xc9,0x8d,0xe7,0x23,0xf6,0x40,0xbc,0xe4,0xaa,0x07,0xe2,0xe4,0x41,0x92],
    [0xd9,0x79,0xc4,0x68,0xa6,0x80,0x62,0xe7,0xbd,0xff,0x4b,0xa6,0xdf,0x78,0x42,0xdf,0xd3,0x49,0x2e,0x0f],
    [0xd9,0x7e,0x47,0x16,0x95,0xf7,0x3d,0x81,0x86,0xde,0xab,0xc1,0xab,0x5b,0x87,0x65,0xe6,0x67,0xcd,0x96],
    [0xdd,0xb3,0x42,0x24,0x97,0xe6,0x1e,0x13,0x54,0x3b,0xea,0x06,0x98,0x9c,0x07,0x89,0x11,0x75,0x55,0xc5],
    [0xde,0x4c,0xe5,0x44,0x7c,0xe0,0xc6,0x79,0x20,0xa1,0x37,0x16,0x05,0xa3,0x91,0x87,0xcb,0x68,0x47,0xc8],
    [0xe2,0x8b,0x3b,0x32,0xb6,0xc3,0x45,0xa3,0x4f,0xf6,0x46,0x74,0x60,0x61,0x24,0xdd,0x5a,0xce,0xca,0x30],
    [0xe3,0xc4,0x08,0xbd,0x53,0xc3,0x1c,0x08,0x5a,0x17,0x46,0xaf,0x40,0x1a,0x40,0x42,0x95,0x4f,0xf7,0x40],
    [0xe4,0x1d,0x24,0x89,0x57,0x1d,0x32,0x21,0x89,0x24,0x6d,0xaf,0xa5,0xeb,0xde,0x1f,0x46,0x99,0xf4,0x98],
    [0xe4,0x69,0xc4,0x47,0x3a,0xf8,0x22,0x17,0xb3,0x0c,0xf1,0x7b,0x10,0xbc,0xdb,0x6c,0x8c,0x79,0x6e,0x75],
    [0xe4,0x81,0x5a,0xe5,0x3b,0x12,0x4e,0x72,0x63,0xf0,0x8d,0xcd,0xbb,0xb7,0x57,0xd4,0x1e,0xd6,0x58,0xc6],
    [0xe5,0xca,0xef,0x4a,0xf8,0x78,0x0e,0x59,0xdf,0x92,0x54,0x70,0xb0,0x50,0xfb,0x23,0xc4,0x3c,0xa6,0x8c],
    [0xea,0x1e,0xa0,0x97,0x2f,0xa0,0x92,0xdd,0x46,0x3f,0x29,0x68,0xf9,0xbb,0x51,0xcc,0x4c,0x98,0x1d,0x71],
    [0xee,0x9e,0x7b,0xb7,0xe5,0x5b,0xbc,0x86,0x41,0x40,0x47,0xb6,0x1d,0x65,0xc9,0xc0,0xd9,0x1f,0xfb,0xd0],
    [0xf2,0x03,0xca,0x17,0x69,0xca,0x8e,0x9e,0x8f,0xe1,0xda,0x9d,0x14,0x7d,0xb6,0x8b,0x6c,0x91,0x98,0x17],
    [0xf3,0xfd,0x2f,0xf0,0xb3,0x01,0x51,0x52,0x9e,0x26,0xbc,0x5c,0xe8,0x67,0x14,0xf9,0x7a,0xad,0x6a,0x58],
    [0xf4,0xd2,0x88,0x8d,0x29,0xd7,0x22,0x22,0x6f,0xaf,0xa5,0xd9,0xb2,0x4f,0x91,0x64,0xc0,0x92,0x42,0x1e],
    [0xf5,0x7e,0x7e,0x7c,0x23,0x97,0x8c,0x3c,0xae,0xc3,0xc3,0x54,0x8e,0x3d,0x61,0x5c,0x34,0x6e,0x79,0xff],
    [0xfa,0x1a,0x85,0x6c,0xfa,0x34,0x09,0xcf,0xa1,0x45,0xfa,0x4e,0x20,0xeb,0x27,0x0d,0xf3,0xeb,0x21,0xab],
    [0xfe,0x3e,0x6a,0x25,0xe6,0xb1,0x92,0xa4,0x2a,0x44,0xec,0xdd,0xcd,0x13,0x79,0x64,0x71,0x73,0x5a,0xcf],
};
